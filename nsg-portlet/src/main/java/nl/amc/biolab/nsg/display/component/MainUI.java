/*
 * Neuroscience Gateway Proof of Concept/Research Portlet
 * This application was developed for research purposes at the Bioinformatics Laboratory of the AMC (The Netherlands)
 *
 * Copyright (C) 2013 Bioinformatics Laboratory, Academic Medical Center of the University of Amsterdam
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package nl.amc.biolab.nsg.display.component;

import com.liferay.portal.model.User;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.JSpinner.DateEditor;

import nl.amc.biolab.nsg.display.VaadinTestApplication;
import nl.amc.biolab.nsg.display.control.MainControl;
import nl.amc.biolab.nsg.display.data.DisplayProcessing;
import nl.amc.biolab.nsg.display.data.DisplayProcessingStatus;
import nl.amc.biolab.nsg.display.service.FieldService;
import nl.amc.biolab.nsgdm.Application;
import nl.amc.biolab.nsgdm.DataElement;
import nl.amc.biolab.nsgdm.Processing;
import nl.amc.biolab.nsgdm.Project;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.Filter;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.filter.Compare.Greater;
import com.vaadin.data.util.filter.Not;
import com.vaadin.data.util.filter.Or;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Form;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Select;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;
import nl.amc.biolab.nsg.display.service.UserDataService;

// TODO refactor, split into components
/**
 *
 * @author initial architecture and implementation: m.almourabit@amc.uva.nl<br/>
 *
 */
public class MainUI extends CustomComponent {

    Logger logger = Logger.getLogger(MainUI.class);

    @AutoGenerated
    private VerticalLayout mainLayout;

    @AutoGenerated
    private HorizontalSplitPanel mainSplitPanel;

    @AutoGenerated
    //	private Form editor;
    private AbstractComponent editor;

    @AutoGenerated
    private HorizontalLayout horizontalLayout_1;

    @AutoGenerated
    private HorizontalLayout topPanel;

    @AutoGenerated
    private HorizontalLayout pagePanel;

    @AutoGenerated
    private HorizontalLayout pagePanelRight;

    @AutoGenerated
    private NativeButton projectsButton;

    @AutoGenerated
    private NativeButton elementsButton;

    @AutoGenerated
    private NativeButton processingsButton;

    @AutoGenerated
    private NativeButton processingButton;

    @AutoGenerated
    private NativeButton dataElementButton;

    @AutoGenerated
    private HorizontalLayout pagePanelLeft;

    @AutoGenerated
    private TextField searchTextField;

    @AutoGenerated
    private Label label_1;

    @AutoGenerated
    private Select searchSelect;

    @AutoGenerated
    private Label searchLabel;

    private static final long serialVersionUID = -541581055112181398L;

    private FieldService fieldService = new FieldService();

    private Button searchButton;
    private Button newSearchButton;
    private Button allSearchButton;

    private Button updateCatButton;

    private ItemList<?> itemList;
    private Property.ValueChangeListener itemListChangeListner;

    private VaadinTestApplication app = (VaadinTestApplication) getApplication();

    @SuppressWarnings("unused")
    private MainUI() {
    }

    public MainUI(MainControl mainControl) {
        logger.setLevel(Level.DEBUG);
        buildMainLayout();
        setCompositionRoot(mainLayout);
    }

    public void init(boolean showNotification) {
        //app.getMainWindow().addComponent(new Label("Please wait"));
        setTopMenu();
        setPageMenu();
        app.getUserDataService().closeSession();
        app.getUserDataService().openSession();
        if (app.getPage() == VaadinTestApplication.PROJECTS) {
            logger.debug("We are in projects page. Setting project item list contents.");
            setProjectItemList();
            if (app.getUserDataService().getProjectDbId() == null) {
                if (showNotification) {
                    app.getMainWindow().showNotification("Please select a project");
                }
            }
            hideEditor();
        } else if (app.getPage() == VaadinTestApplication.DATA) {
            logger.debug("We are in data page");
            if (app.getUserDataService().getProjectDbId() == null) {
                logger.debug("Setting project item list contents.");
                setProjectItemList();
                if (showNotification) {
                    app.getMainWindow().showNotification("Please select a project");
                }
                hideEditor();
                return;
            } 
//                else { //if (app.getUserDataService().getDataElementDbIds() == null || app.getUserDataService().getDataElementDbIds().size() == 0) {
//                if (showNotification) {
//                    app.getMainWindow().showNotification("Please select an item");
//                }
//                logger.debug("Setting data element editor contents.");
                // setDataElementEditor(null);
                hideEditor();
//            } 
//            else if (app.getUserDataService().getDataElementDbIds().size() == 1) {
//                DataElement de = app.getUserDataService().getDataElement((Long) app.getUserDataService().getDataElementDbIds().toArray()[0]);
//                logger.debug("Setting data element editor contents.");
//                setDataElementEditor(de);
//            }
            logger.debug("Setting data element item list contents.");
            setDataElementItemList(app.getUserDataService().getProjectDbId());
        } else if (app.getPage() == VaadinTestApplication.PROCESSING) {
            logger.debug("We are in processing page");
            if (app.getUserDataService().getProcessingDbId() != null) {
////                setProcessingStatusEditor(null);
//                hideEditor();
//            } else {
                logger.debug("Setting processing status editor contents");
                setProcessingStatusEditor(app.getUserDataService().getProcessingDbId());
            }
            logger.debug("Setting processing item list contents");
            setProccessingItemList();
        } else if (app.getPage() == VaadinTestApplication.ADMIN) {
            logger.debug("We are in admin page");
            if (app.getUserDataService().getProcessingDbId() == null) {
                setProcessingStatusEditor(null);
            } else {
                logger.debug("Setting processing status editor contents");
                setProcessingStatusEditor(app.getUserDataService().getProcessingDbId());
            }
            logger.debug("Setting processing item list contents");
            setProccessingItemList();
        }
        logger.debug("Finished initilizaing the page.");
    }

    //top menu
    public void setTopMenu() {
        if (!app.getUserDataService().isNSGAdmin()) {
            updateCatButton.setVisible(false);
        }
        updateCatButton.addListener(new Button.ClickListener() {
            @Override
            public void buttonClick(ClickEvent event) {
                app.getUserDataService().updateCatalogue();
            }
        });
    }

    //page menus
    public void setPageMenu() {
        dataElementButton.setVisible(false);
        dataElementButton.addListener(new Button.ClickListener() {
            @SuppressWarnings("unchecked")
            public void buttonClick(ClickEvent event) {
                if (itemList.getValue() == null) {
                    return;
                }
                setDataElementEditor((DataElement) itemList.getValue());
            }
        });

        processingButton.setVisible(false);
        processingButton.addListener(new Button.ClickListener() {
            public void buttonClick(ClickEvent event) {
                if (itemList.getValue() == null) {
                    return;
                }
                Set<DataElement> des = new HashSet<DataElement>();
                des.add((DataElement) itemList.getValue());
                setProcessingEditor(des);
            }
        });
    }

    public void setSearchSelect(final Map<String, String> fields) {
        searchSelect.removeAllItems();
        for (String f : fields.keySet()) {
            searchSelect.addItem(f);
            searchSelect.setItemCaption(f, fields.get(f));
        }
        if (app.isAdminURL() && app.getUserDataService().isNSGAdmin()) {
            //TODO refactor add to FieldService
            searchSelect.addItem("user");
            searchSelect.setItemCaption("user", "user");

        }
        searchSelect.setNewItemsAllowed(false);
        searchSelect.setValue(fields.keySet().toArray()[0]);
        searchSelect.setNullSelectionAllowed(false);

        searchButton.addListener(new Button.ClickListener() {
            Filter filter = null;

            @Override
            public void buttonClick(ClickEvent event) {
                String value = (String) searchSelect.getValue();
                if (value == null) {
                    return;
                }
                filter = new SimpleStringFilter(value, (String) searchTextField.getValue(), true, false);
                itemList.addFilter(filter);
            }
        });
        newSearchButton.addListener(new Button.ClickListener() {
            Filter filter = null;

            @Override
            public void buttonClick(ClickEvent event) {
                itemList.removeAllFilters();
            }
        });
        allSearchButton.addListener(new Button.ClickListener() {
            Filter filter = null;

            @Override
            public void buttonClick(ClickEvent event) {
                String value = (String) searchSelect.getValue();
                if (value == null) {
                    return;
                }
                SimpleStringFilter[] ssf = new SimpleStringFilter[fields.keySet().size()];
                if (app.isAdminURL() && app.getUserDataService().isNSGAdmin()) { // user column filter
                    ssf = new SimpleStringFilter[fields.keySet().size() + 1];
                }

                int i = 0;
                for (String k : fields.keySet()) {
                    ssf[i++] = new SimpleStringFilter(k, (String) searchTextField.getValue(), true, false);
                }

                if (app.isAdminURL() && app.getUserDataService().isNSGAdmin()) {
                    ssf[i++] = new SimpleStringFilter("user", (String) searchTextField.getValue(), true, false);
                }

                filter = new Or(ssf);
                itemList.addFilter(filter);
            }
        });
    }

    //left content
    public void setProjectItemList() {
        Map<String, String> fields = fieldService.getFieldHeaders(Project.class.getName());
        setSearchSelect(fields);

        dataElementButton.setVisible(false);
        processingButton.setVisible(false);

        setItemList("projects", new ItemList<Project>(app.getUserDataService().getProjects(), null, fields, Project.class));
        itemList.setMultiSelect(false);
        itemList.setSortContainerPropertyId("name");
        itemList.setSortAscending(true);
        itemList.sort();

        itemList.addListener(new ItemClickListener() {
            @Override
            public void itemClick(ItemClickEvent event) {
            }
        });

        itemListChangeListner = new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                Project project = (Project) itemList.getValue();
                logger.debug("Selected a project: " + project);
                if (project != null) {
                    app.getUserDataService().setProjectDbId(project.getDbId());
                    logger.debug("Project ID: " + project.getDbId());
                    app.getUserDataService().setDataElementDbIds(null);
                    app.getUserDataService().setProcessingDbId(null);
                    app.setSessionVar(VaadinTestApplication.SESS_PROJECT, project.getDbId());
                    app.getMainWindow().open(new ExternalResource("data"));
                }
            }
        };
        itemList.addListener(itemListChangeListner);
    }

    public void setDataElementItemList(Long projectId) {
        Map<String, String> fields = fieldService.getFieldHeaders(DataElement.class.getName());
        setSearchSelect(fields);

        List<DataElement> elements = app.getUserDataService().getProjectData(projectId);

        // last selected
        Set<Long> selectedDbIds = app.getUserDataService().getDataElementDbIds();

        //itemList
        logger.debug("setting ItemList");
        setItemList("data", new ItemList<DataElement>(elements, selectedDbIds, fields, DataElement.class));
        logger.debug("Finished setting item list.");
        itemList.setSortContainerPropertyId("subject");
        itemList.setSortAscending(true);
        itemList.sort();

        if (elements != null && elements.size() != 0 && selectedDbIds != null && selectedDbIds.size() != 0) {
            dataElementsChange((DataElement) itemList.getValue());
        }

        if (elements == null || elements.size() == 0) {
            app.getMainWindow().showNotification("No items found");
        }

        // listeners
        itemList.addListener(new ItemClickListener() {
            @Override
            public void itemClick(ItemClickEvent event) {
                dataElementButton.setVisible(true);
                processingButton.setVisible(true);
            }
        });

        itemListChangeListner = new Property.ValueChangeListener() {
            @Override
            public void valueChange(ValueChangeEvent event) {
                dataElementsChange((DataElement) itemList.getValue());
            }
        };
        itemList.addListener(itemListChangeListner);
        logger.debug("finished setting data element item list");
    }

    /**
     * ItemList valueChange
     *
     * @param changed values
     */
    private void dataElementsChange(DataElement dataElement) {
        Set<DataElement> values = new HashSet<DataElement>();
        values.add(dataElement);
        dataElementButton.setVisible(true);
        processingButton.setVisible(true);
        if (values == null || values.size() == 0) {
            hideEditor();
            dataElementButton.setVisible(false);
            processingButton.setVisible(false);
        } else if (values.size() == 1
                && (mainSplitPanel.getComponentCount() == 1 || mainSplitPanel.getSecondComponent() instanceof DataElementForm)) {
            setDataElementEditor((DataElement) values.iterator().next());
        } else if (values.size() != 0 && mainSplitPanel.getComponentCount() == 2) {
            if (editor == null || !(editor instanceof ProcessingForm)) {
                setProcessingEditor(values);
            } else if (app != null && app.getUserDataService() != null) {
                values = new HashSet<DataElement>();
                values.addAll((Collection<DataElement>) ((ProcessingForm) editor).getDataElements());
                values.add(dataElement);
                List<Application> apps = null;
                if (values != null && values.size() != 0) {
                    apps = app.getUserDataService().getApplications(((DataElement) values.toArray()[0]).getDbId());
                } else {
                    apps = app.getUserDataService().getAllApplications();
                }
                ((ProcessingForm) editor).setProcessing(values, apps);
            }
//        } else if (values.size() != 0) {
//            setDataElementEditor((DataElement) values.toArray()[0]);
        } else {
            hideEditor();
        }
        if (values != null) {
            app.getUserDataService().setDataElementDbIds(itemList.getSelectedDbIds());
        }
    }

    public void setProccessingItemList() {
        Map<String, String> fields = fieldService.getFieldHeaders(Processing.class.getName());
        setSearchSelect(fields);

        dataElementButton.setVisible(false);
        processingButton.setVisible(false);

        // last selected
        Long dbId = app.getUserDataService().getProcessingDbId();
        Set<Long> selectedDbIds = new HashSet<Long>();
        if (dbId != null) {
            selectedDbIds.add(dbId);
        }

        ItemList<?> il = null;
        if (app.isAdminURL() && app.getUserDataService().isNSGAdmin()) {
            List<DisplayProcessing> list = new ArrayList<DisplayProcessing>();
            for (Processing p : app.getUserDataService().getAllProcessing()) {
                list.add(new DisplayProcessing(p));
            }
            Map<String, String> listFields = new LinkedHashMap<String, String>();
            listFields.putAll(fields);
            listFields.put("user", "user");
            il = new ItemList<DisplayProcessing>(list, selectedDbIds, listFields, DisplayProcessing.class);
        } else {
            il = new ItemList<Processing>(app.getUserDataService().getCurrentProcessing(), selectedDbIds, fields, Processing.class);
        }

        setItemList("processing", il);
        itemList.setMultiSelect(false);
        itemList.setSortContainerPropertyId("date");
        itemList.setSortAscending(false);
        itemList.sort();

        itemList.addListener(new ItemClickListener() {
            @Override
            public void itemClick(ItemClickEvent event) {
            }
        });

        itemListChangeListner = new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                Processing processing = (Processing) itemList.getValue();
                app.getUserDataService().setProcessingDbId(processing.getDbId());
                if (processing != null) {
                    setProcessingStatusEditor(processing.getDbId());
                    showEditor();
//                    Object sort = itemList.getSortContainerPropertyId();
//                    boolean asc = itemList.isSortAscending();
                    //setProccessingItemList();
//                    itemList.setSortContainerPropertyId(sort);
//                    itemList.setSortAscending(asc);
                }
            }
        };
        itemList.addListener(itemListChangeListner);
    }

    //right
    private void setDataElementEditor(DataElement dataElement) {
        DataElementForm def = new DataElementForm(app.getFieldService());
        if (dataElement != null) {
            final List<nl.amc.biolab.nsgdm.Property> metaData = app.getUserDataService().getMetaData(dataElement);
            if (metaData != null) {
                def.setDataElement(dataElement, metaData);
                setEditor(def);
            }
        }
    }

    private void setProcessingEditor(Set<DataElement> dataElements) {
        final ProcessingForm pf = new ProcessingForm();

        List<Application> apps = null;
        if (dataElements != null && dataElements.size() != 0) {
            apps = app.getUserDataService().getApplications(((DataElement) dataElements.toArray()[0]).getDbId());
        } else {
            apps = app.getUserDataService().getAllApplications();
        }
        pf.setProcessing(dataElements, apps);

        pf.addListener(new Listener() {
            @Override
            public void componentEvent(Event event) {
                if (((Button) event.getSource()).getCaption().equals(ProcessingForm.SUBMIT)) {
                    Processing processing = (Processing) ((Button) event.getSource()).getData();

                    // input
                    List<List<Long>> submits = new ArrayList<List<Long>>();
                    try {
                        // workaround for missing elements in pf.getDataElements() TODO fix
                        for (Long dbId : ((VaadinTestApplication) getApplication()).getUserDataService().getDataElementDbIds()) {
                            ArrayList<Long> filesPerPort = new ArrayList<Long>();
                            filesPerPort.add(dbId);
                            submits.add(filesPerPort);
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    // submit
                    String messsage = app.getUserDataService().checkApplicationInput(processing.getApplication().getDbId(), submits);
                    if (messsage != null) {
                        app.getMainWindow().showNotification(messsage.replaceAll("\n", "<br />"), Notification.TYPE_ERROR_MESSAGE);
                    } else {
                        //TODO currently submit blocks for some time: setProcessingStatusEditor please wait for start and refresh later
                        Long processingDbId = app.getProcessingService().submit(app.getUserDataService().getProjectDbId(),
                                processing.getApplication().getDbId(),
                                processing.getApplication().getType(),
                                (ArrayList) submits,
                                app.getUserDataService().getUserId(), app.getUserDataService().getLiferayId(),
                                processing.getName());
                        logger.info("submit result processingDbId " + ((processingDbId != null) ? processingDbId : "null"));
                        app.getUserDataService().setProcessingDbId(processingDbId);

                        if (processingDbId != null) {
                            processing = app.getUserDataService().getProcessing(processingDbId);
                            app.getMainWindow().open(new ExternalResource("processing"));
                        } else {
                            app.getMainWindow().showNotification("Failed to submit processing");
                        }
                    }
                }
            }
        });
        setEditor(pf);
    }

    private void setProcessingStatusEditor(Long processingDbId) {
        logger.info("statusForm for processingDbId " + ((processingDbId != null) ? processingDbId : "null"));
        final ProcessingStatusForm psf = new ProcessingStatusForm(app.getUserDataService(), app.getProcessingService());

        if (processingDbId != null) {
            psf.setProcessingStatus(
                    app.getProcessingService().getProcessingStatus(
                            app.getUserDataService().getProcessing(processingDbId),
                            app.getUserDataService().getUserId(),
                            app.getUserDataService().getLiferayId(),
                            false));
            setEditor(psf);
        } else {
            hideEditor();
        }

        psf.addListener(new Listener() {
            @Override
            public void componentEvent(Event event) {
                DisplayProcessingStatus processingStatus = (DisplayProcessingStatus) ((AbstractComponent) event.getSource()).getData();
                logger.debug(processingStatus);
                if (processingStatus != null) {
                    psf.setProcessingStatus(
                            app.getProcessingService().getProcessingStatus(
                                    app.getUserDataService().getProcessing(processingStatus.getProcessing().getDbId()),
                                    app.getUserDataService().getUserId(),
                                    app.getUserDataService().getLiferayId(),
                                    true));    // TODO: why should this be true here?
                    setEditor(psf);
                    logger.debug("About to attach to " + psf);
//                    psf.attach();
                    //logger.debug("Setting processing item list.");
                    //setProccessingItemList();
                    //logger.debug("Setting processing item list: Finished.");
                }
            }
        });
    }

    public void setItemList(String name, ItemList<?> itemList) {
        logger.debug("1");
        Project project = ((VaadinTestApplication) getApplication()).getUserDataService().getProject();
        logger.debug("2");
        if (name != null && !name.equals("projects") && !name.equals("processing") && project != null) {
            mainSplitPanel.setCaption(project.getName() + " " + name);
//        } else {
//            mainSplitPanel.setCaption(name);
        }

        logger.debug("3");
        this.itemList = itemList;
        logger.debug("4");
//        mainSplitPanel.removeComponent(mainSplitPanel.getFirstComponent());
        mainSplitPanel.removeAllComponents();
        logger.debug("5");
        mainSplitPanel.addComponent(itemList);
        logger.debug("6");
        mainSplitPanel.setSplitPosition(100);
    }

    //editor
    public void setEditor(AbstractComponent form) {
        mainSplitPanel.removeComponent(editor);
        editor = form;
        showEditor();
    }

    private void hideEditor() {
        if (mainSplitPanel.getComponentCount() == 2) {
            mainSplitPanel.removeComponent(editor);
        }
        mainSplitPanel.setSplitPosition(100);
    }

    private void showEditor() {
        if (mainSplitPanel.getComponentCount() != 2) {
            mainSplitPanel.addComponent(editor);
            mainSplitPanel.setSplitPosition(50);
        }
    }

    @Override
    public void attach() {
        super.attach();
        this.app = (VaadinTestApplication) getApplication();
//		if (app.getUserDataService() != null) {
//			init(false);
//		}
    }

	//build components
    //	@AutoGenerated
    private VerticalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(false);
        mainLayout.setSpacing(true);

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");

        // topPanel
        topPanel = buildTopPanel();
        mainLayout.addComponent(topPanel);
        mainLayout.setExpandRatio(topPanel, 1.0f);
        mainLayout.setComponentAlignment(topPanel, new Alignment(33));

        // horizontal rule
        Label hr = new Label("<hr/>", Label.CONTENT_XHTML);
        hr.addStyleName("horizontal-separator");
        hr.setWidth("100%");
        hr.setHeight("2px");
        mainLayout.addComponent(hr);
        mainLayout.setComponentAlignment(hr, new Alignment(33));

        // mainSplitPanel
        mainSplitPanel = buildMainSplitPanel();
        mainLayout.addComponent(mainSplitPanel);
        mainLayout.setExpandRatio(mainSplitPanel, 1.0f);

        return mainLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildTopPanel() {
        topPanel = new HorizontalLayout();
        topPanel.setStyleName("topPanel");
        topPanel.setImmediate(true);
        topPanel.setWidth("100%");
        topPanel.setHeight("32px");
        topPanel.setMargin(false);
        topPanel.setSpacing(false);

        HorizontalLayout topPanelLeft = buildTopPanelLeft();
        topPanel.addComponent(topPanelLeft);
        topPanel.setComponentAlignment(topPanelLeft, Alignment.MIDDLE_LEFT);

        HorizontalLayout topPanelMid = buildTopPanelMid();
        topPanel.addComponent(topPanelMid);
        topPanel.setComponentAlignment(topPanelMid, Alignment.MIDDLE_CENTER);

        pagePanel = buildTopPanelRight();
        topPanel.addComponent(pagePanel);
        topPanel.setComponentAlignment(pagePanel, Alignment.MIDDLE_RIGHT);

        return topPanel;
    }

    private HorizontalLayout buildTopPanelLeft() {
        HorizontalLayout topPanelLeft = new HorizontalLayout();
        topPanelLeft.setImmediate(true);
        topPanelLeft.setWidth("-1px");
        topPanelLeft.setHeight("-1px");
        topPanelLeft.setMargin(false);
        topPanelLeft.setSpacing(false);

        updateCatButton = new NativeButton();
        updateCatButton.setCaption("synchronize data");
        updateCatButton.setVisible(false);
        topPanelLeft.addComponent(updateCatButton);
        topPanelLeft.setComponentAlignment(updateCatButton, new Alignment(33));

        projectsButton = new NativeButton();
//        projectsButton.setCaption("projects");
        projectsButton.setImmediate(true);
        projectsButton.setWidth("-1px");
        projectsButton.setHeight("-1px");
        projectsButton.setHtmlContentAllowed(true);

        elementsButton = new NativeButton();
        elementsButton.setCaption("data");
        elementsButton.setImmediate(true);
        elementsButton.setWidth("-1px");
        elementsButton.setHeight("-1px");
        elementsButton.setHtmlContentAllowed(true);

        processingsButton = new NativeButton();
//        processingsButton.setCaption("processing");
        processingsButton.setImmediate(true);
        processingsButton.setWidth("-1px");
        processingsButton.setHeight("-1px");
        processingsButton.setHtmlContentAllowed(true);

        return topPanelLeft;
    }

    private HorizontalLayout buildTopPanelMid() {
        // common part: create layout
        HorizontalLayout topPanelMid = new HorizontalLayout();
        topPanelMid.setImmediate(false);
        topPanelMid.setWidth("-1px");
        topPanelMid.setHeight("-1px");
        topPanelMid.setMargin(false);
        topPanelMid.setSpacing(true);

        // searchLabel
        searchLabel = new Label();
        searchLabel.setImmediate(false);
        searchLabel.setWidth("-1px");
        searchLabel.setHeight("-1px");
        searchLabel.setValue("search ");
        topPanelMid.addComponent(searchLabel);
        topPanelMid.setComponentAlignment(searchLabel, Alignment.MIDDLE_CENTER);

        // searchSelect
        searchSelect = new Select();
        searchSelect.setImmediate(false);
        searchSelect.setWidth("-1px");
        searchSelect.setHeight("-1px");
        topPanelMid.addComponent(searchSelect);
        topPanelMid.setComponentAlignment(searchSelect, Alignment.MIDDLE_CENTER);

        // label_1
        label_1 = new Label();
        label_1.setImmediate(false);
        label_1.setWidth("-1px");
        label_1.setHeight("-1px");
        label_1.setValue(" with ");
        topPanelMid.addComponent(label_1);
        topPanelMid.setComponentAlignment(label_1, Alignment.MIDDLE_CENTER);

        // searchTextField
        searchTextField = new TextField();
        searchTextField.setImmediate(false);
        searchTextField.setWidth("-1px");
        searchTextField.setHeight("-1px");
        topPanelMid.addComponent(searchTextField);
        topPanelMid.setComponentAlignment(searchTextField, Alignment.MIDDLE_CENTER);

        searchButton = new NativeButton();
        searchButton.setCaption("refine search");
        topPanelMid.addComponent(searchButton);
        topPanelMid.setComponentAlignment(searchButton, Alignment.MIDDLE_CENTER);

        allSearchButton = new NativeButton();
        allSearchButton.setCaption("search in all columns");
        topPanelMid.addComponent(allSearchButton);
        topPanelMid.setComponentAlignment(allSearchButton, Alignment.MIDDLE_CENTER);

        newSearchButton = new NativeButton();
        newSearchButton.setCaption("new search");
        topPanelMid.addComponent(newSearchButton);
        topPanelMid.setComponentAlignment(newSearchButton, Alignment.MIDDLE_CENTER);

        return topPanelMid;
    }

    @AutoGenerated
    private HorizontalLayout buildTopPanelRight() {
        // common part: create layout
        pagePanel = new HorizontalLayout();
        pagePanel.setStyleName("topPanel");
        pagePanel.setImmediate(false);
        pagePanel.setWidth("-1px");
        pagePanel.setHeight("-1px");
        pagePanel.setSpacing(true);

        // dataElementButton
        dataElementButton = new NativeButton();
        dataElementButton.setCaption("view");
        dataElementButton.setImmediate(true);
        dataElementButton.setWidth("-1px");
        dataElementButton.setHeight("-1px");
        pagePanel.addComponent(dataElementButton);
        pagePanel.setComponentAlignment(dataElementButton, new Alignment(34));
        dataElementButton.setVisible(false);

        // processingButton
        processingButton = new NativeButton();
        processingButton.setCaption("use data");
        processingButton.setImmediate(true);
        processingButton.setWidth("-1px");
        processingButton.setHeight("-1px");
        pagePanel.addComponent(processingButton);
        pagePanel.setComponentAlignment(processingButton, new Alignment(34));

        return pagePanel;
    }

    @AutoGenerated
    private HorizontalSplitPanel buildMainSplitPanel() {
        // common part: create layout
        mainSplitPanel = new HorizontalSplitPanel();
        mainSplitPanel.setImmediate(false);
        mainSplitPanel.setWidth("100.0%");
        mainSplitPanel.setHeight("100.0%");
        mainSplitPanel.setMargin(true);
        mainSplitPanel.setSplitPosition(60);

        // itemList
        mainSplitPanel.addComponent(new Table());

        // editor
        editor = new Form();
        editor.setImmediate(false);
        editor.setWidth("100.0%");
        editor.setHeight("100.0%");
        mainSplitPanel.addComponent(editor);

        return mainSplitPanel;
    }
}
